From 5c592e438dad4f1d22e5c25a996c4e41ec320d1a Mon Sep 17 00:00:00 2001
From: Tamaki Hidetsugu <git@ralph.ms>
Date: Fri, 5 Jul 2024 00:45:28 +0900
Subject: [PATCH 01/11] Create wrapper class of AudioRecord

Change-Id: I546d650797591d020426007b17f6ded2b752c344
---
 .../video/internal/audio/AudioStreamImpl.java | 49 +++++++---
 .../audio/wrapper/AudioRecordWrapper.java     | 48 ++++++++++
 .../wrapper/DefaultAudioRecordWrapper.java    | 90 +++++++++++++++++++
 3 files changed, 175 insertions(+), 12 deletions(-)
 create mode 100644 camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/AudioRecordWrapper.java
 create mode 100644 camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/DefaultAudioRecordWrapper.java

diff --git a/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/AudioStreamImpl.java b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/AudioStreamImpl.java
index 4c5d3b39..522ee2c2 100644
--- a/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/AudioStreamImpl.java
+++ b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/AudioStreamImpl.java
@@ -40,6 +40,10 @@ import androidx.annotation.Nullable;
 import androidx.annotation.RequiresApi;
 import androidx.annotation.RequiresPermission;
 import androidx.camera.core.Logger;
+// Change for THINKLET :: Start
+import androidx.camera.video.internal.audio.wrapper.AudioRecordWrapper;
+import androidx.camera.video.internal.audio.wrapper.DefaultAudioRecordWrapper;
+// Change for THINKLET :: End
 import androidx.camera.video.internal.compat.Api23Impl;
 import androidx.camera.video.internal.compat.Api24Impl;
 import androidx.camera.video.internal.compat.Api29Impl;
@@ -65,7 +69,9 @@ public class AudioStreamImpl implements AudioStream {
     private static final long DIFF_LIMIT_FROM_SYSTEM_TIME_NS = MILLISECONDS.toNanos(500L);
 
     @NonNull
-    private AudioRecord mAudioRecord;
+    // Change for THINKLET :: Start
+    private AudioRecordWrapper mAudioRecord;
+    // Change for THINKLET :: End
     private final AudioSettings mSettings;
     private final AtomicBoolean mIsReleased = new AtomicBoolean(false);
     private final AtomicBoolean mIsStarted = new AtomicBoolean(false);
@@ -151,8 +157,9 @@ public class AudioStreamImpl implements AudioStream {
         mNotifiedSilenceState.set(null);
         boolean isSilenced = false;
         if (Build.VERSION.SDK_INT >= 29) {
-            AudioRecordingConfiguration config = Api29Impl.getActiveRecordingConfiguration(
-                    mAudioRecord);
+            // Change for THINKLET :: Start
+            AudioRecordingConfiguration config = mAudioRecord.getActiveRecordingConfiguration();
+            // Change for THINKLET :: End
             isSilenced = config != null && Api29Impl.isClientSilenced(config);
         }
         notifySilenced(isSilenced);
@@ -187,7 +194,9 @@ public class AudioStreamImpl implements AudioStream {
             return;
         }
         if (Build.VERSION.SDK_INT >= 29 && mAudioRecordingCallback != null) {
-            Api29Impl.unregisterAudioRecordingCallback(mAudioRecord, mAudioRecordingCallback);
+            // Change for THINKLET :: Start
+            mAudioRecord.unregisterAudioRecordingCallback(mAudioRecordingCallback);
+            // Change for THINKLET :: End
         }
         mAudioRecord.release();
     }
@@ -230,7 +239,9 @@ public class AudioStreamImpl implements AudioStream {
         mCallbackExecutor = executor;
         if (Build.VERSION.SDK_INT >= 29) {
             if (mAudioRecordingCallback != null) {
-                Api29Impl.unregisterAudioRecordingCallback(mAudioRecord, mAudioRecordingCallback);
+                // Change for THINKLET :: Start
+                mAudioRecord.unregisterAudioRecordingCallback(mAudioRecordingCallback);
+                // Change for THINKLET :: End
             }
             if (callback == null) {
                 return;
@@ -238,8 +249,9 @@ public class AudioStreamImpl implements AudioStream {
             if (mAudioRecordingCallback == null) {
                 mAudioRecordingCallback = new AudioRecordingApi29Callback();
             }
-            Api29Impl.registerAudioRecordingCallback(mAudioRecord, executor,
-                    mAudioRecordingCallback);
+            // Change for THINKLET :: Start
+            mAudioRecord.registerAudioRecordingCallback(executor, mAudioRecordingCallback);
+            // Change for THINKLET :: End
         }
     }
 
@@ -257,7 +269,9 @@ public class AudioStreamImpl implements AudioStream {
         long presentationTimeNs = -1;
         if (Build.VERSION.SDK_INT >= 24 && !mShouldFallbackToSystemTime) {
             AudioTimestamp audioTimestamp = new AudioTimestamp();
-            if (Api24Impl.getTimestamp(mAudioRecord, audioTimestamp,
+            // Change for THINKLET :: Start
+            if (mAudioRecord.getTimestamp(audioTimestamp,
+                    // Change for THINKLET :: End
                     AudioTimestamp.TIMEBASE_MONOTONIC) == AudioRecord.SUCCESS) {
                 presentationTimeNs = computeInterpolatedTimeNs(mSettings.getSampleRate(),
                         mTotalFramesRead, audioTimestamp);
@@ -288,7 +302,9 @@ public class AudioStreamImpl implements AudioStream {
 
     @RequiresPermission(Manifest.permission.RECORD_AUDIO)
     @NonNull
-    private static AudioRecord createAudioRecord(int bufferSizeInByte,
+    // Change for THINKLET :: Start
+    private static AudioRecordWrapper createAudioRecord(int bufferSizeInByte,
+            // Change for THINKLET :: End
             @NonNull AudioSettings settings, @Nullable Context context) {
         if (Build.VERSION.SDK_INT >= 23) {
             AudioFormat audioFormatObj = new AudioFormat.Builder()
@@ -303,18 +319,27 @@ public class AudioStreamImpl implements AudioStream {
             Api23Impl.setAudioSource(audioRecordBuilder, settings.getAudioSource());
             Api23Impl.setAudioFormat(audioRecordBuilder, audioFormatObj);
             Api23Impl.setBufferSizeInBytes(audioRecordBuilder, bufferSizeInByte);
-            return Api23Impl.build(audioRecordBuilder);
+            // Change for THINKLET :: Start
+            return new DefaultAudioRecordWrapper(Api23Impl.build(audioRecordBuilder));
+            // Change for THINKLET :: End
         } else {
-            return new AudioRecord(settings.getAudioSource(),
+            // Change for THINKLET :: Start
+            AudioRecord audioRecord = new AudioRecord(settings.getAudioSource(),
+                    // Change for THINKLET :: End
                     settings.getSampleRate(),
                     channelCountToChannelConfig(settings.getChannelCount()),
                     settings.getAudioFormat(),
                     bufferSizeInByte);
+            // Change for THINKLET :: Start
+            return new DefaultAudioRecordWrapper(audioRecord);
+            // Change for THINKLET :: End
         }
     }
 
     private static void checkAudioRecordInitialStateOrReleaseAndThrow(
-            @NonNull AudioRecord audioRecord) throws AudioStreamException {
+            // Change for THINKLET :: Start
+            @NonNull AudioRecordWrapper audioRecord) throws AudioStreamException {
+        // Change for THINKLET :: End
         if (audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
             audioRecord.release();
             throw new AudioStreamException("Unable to initialize AudioRecord");
diff --git a/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/AudioRecordWrapper.java b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/AudioRecordWrapper.java
new file mode 100644
index 00000000..a9042252
--- /dev/null
+++ b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/AudioRecordWrapper.java
@@ -0,0 +1,48 @@
+package androidx.camera.video.internal.audio.wrapper;
+
+import android.media.AudioManager;
+import android.media.AudioRecordingConfiguration;
+import android.media.AudioTimestamp;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+
+import java.nio.ByteBuffer;
+import java.util.concurrent.Executor;
+
+/**
+ * A wrapper of AudioRecord to allow the implementation to be replaced in AudioRecord with special
+ * specifications and to allow processing of input data.
+ */
+public abstract class AudioRecordWrapper {
+    public abstract int getState();
+
+    public abstract void release();
+
+    public abstract void startRecording();
+
+    public abstract int getRecordingState();
+
+    public abstract void stop();
+
+    public abstract int read(@NonNull ByteBuffer byteBuffer, int bufferSize);
+
+    public abstract int getAudioSessionId();
+
+    @RequiresApi(24)
+    public abstract int getTimestamp(@NonNull AudioTimestamp audioTimestamp, int timeBase);
+
+    @RequiresApi(29)
+    @Nullable
+    public abstract AudioRecordingConfiguration getActiveRecordingConfiguration();
+
+    @RequiresApi(29)
+    public abstract void registerAudioRecordingCallback(
+            @NonNull Executor executor,
+            @NonNull AudioManager.AudioRecordingCallback callback);
+
+    @RequiresApi(29)
+    public abstract void unregisterAudioRecordingCallback(
+            @NonNull AudioManager.AudioRecordingCallback callback);
+}
diff --git a/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/DefaultAudioRecordWrapper.java b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/DefaultAudioRecordWrapper.java
new file mode 100644
index 00000000..61baabaf
--- /dev/null
+++ b/camera/camera-video/src/main/java/androidx/camera/video/internal/audio/wrapper/DefaultAudioRecordWrapper.java
@@ -0,0 +1,90 @@
+package androidx.camera.video.internal.audio.wrapper;
+
+import android.media.AudioManager;
+import android.media.AudioRecord;
+import android.media.AudioRecordingConfiguration;
+import android.media.AudioTimestamp;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
+import androidx.camera.video.internal.compat.Api24Impl;
+import androidx.camera.video.internal.compat.Api29Impl;
+
+import java.nio.ByteBuffer;
+import java.util.concurrent.Executor;
+
+/**
+ * An implementation of AudioRecordWrapper which is equivalent to default implementation of
+ * AndroidX.
+ */
+public class DefaultAudioRecordWrapper extends AudioRecordWrapper {
+
+    private final AudioRecord audioRecord;
+
+    public DefaultAudioRecordWrapper(AudioRecord audioRecord) {
+        this.audioRecord = audioRecord;
+    }
+
+    @Override
+    public int getState() {
+        return audioRecord.getState();
+    }
+
+    @Override
+    public void release() {
+        audioRecord.release();
+    }
+
+    @Override
+    public void startRecording() {
+        audioRecord.startRecording();
+    }
+
+    @Override
+    public int getRecordingState() {
+        return audioRecord.getRecordingState();
+    }
+
+    @Override
+    public void stop() {
+        audioRecord.stop();
+    }
+
+    @Override
+    public int read(@NonNull ByteBuffer byteBuffer, int bufferSize) {
+        return audioRecord.read(byteBuffer, bufferSize);
+    }
+
+    @Override
+    public int getAudioSessionId() {
+        return audioRecord.getAudioSessionId();
+    }
+
+    @RequiresApi(24)
+    @Override
+    public int getTimestamp(@NonNull AudioTimestamp audioTimestamp, int timeBase) {
+        return Api24Impl.getTimestamp(audioRecord, audioTimestamp, timeBase);
+    }
+
+    @RequiresApi(29)
+    @Nullable
+    @Override
+    public AudioRecordingConfiguration getActiveRecordingConfiguration() {
+        return Api29Impl.getActiveRecordingConfiguration(audioRecord);
+    }
+
+    @RequiresApi(29)
+    @Override
+    public void registerAudioRecordingCallback(@NonNull Executor executor,
+            @NonNull AudioManager.AudioRecordingCallback callback) {
+        Api29Impl.registerAudioRecordingCallback(audioRecord, executor, callback);
+    }
+
+    @RequiresApi(29)
+    @Override
+    public void unregisterAudioRecordingCallback(
+            @NonNull AudioManager.AudioRecordingCallback callback) {
+        Api29Impl.unregisterAudioRecordingCallback(audioRecord, callback);
+    }
+}
-- 
2.25.1

